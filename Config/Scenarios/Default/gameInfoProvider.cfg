// define configurable parameters for the GameInfoProvider
//
// All durations and delays are in ms.
// The default values here are for normal Challenge Shield 5v5 games

gameControllerTimeout = 2000;

unstiffHeadButtonPressDuration = 1000; // How long the head buttons need to be pressed until the robot transitions to unstiff
calibrationHeadButtonPressDuration = 200; // How long the front head button needs to be pressed until the robot transitions to calibration
finishedToUnstiffDuration = 8000; // How long the game state needs to be finished until the robot transitions to unstiff

useWhistleForKickOff = true;
useWhistleAfterGoal = true;
ignoreWhistleDuration = 5000; // the min time after detecting a whistle before another can be detected
gameControllerOperatorDelay = 3000; // how long before the GC operator enters the ref's decisions
sayGuessedStateChange = true; // whether to speak guessed state changes (E.g. due to whistle)
requireOwnWhistle = true;     // must we hear the whistle directly to react. If false we can use teammate whistles without hearing directly
requiredWhistleConsensus = 1; // the number of detected whistles needed to react (possibly including our own detection)
whistleMatchDuration = 1200;  // time window over which we consider whistles to match (this should include any expected communication delay)

useBallInGoalCheck = true;   // whether we needed to see the ball in the goal to believe a whistle guessed goal
acceptBallInGoalDelay = 5000; // how long ago we could have seen the ball in goal to believe that we scored

useVisualReady = true; // whether to react to the visual ready signal if detected
visualReadyMatchDuration = 1500;

ballOutOfCenterCircleCounterThreshold = 10; // The number of times the ball needs to be seen at a certain position
ballOutOfCenterCircleTolerance = 200;    // ball must be this far outside the circle to be believed
ballSaveInterval = 100;                  // save ball motion at this interval in ms
ballMovedTolerance = 100.0;           // distance from kick-off point the ball needs to be seen to be considered as moved
ballMovedCloseToRobotThreshold = 300; // if the ball is closer than center circle radius minus this threshold, then it has moved
standStillGyroThreshold = 0.25; //maximum Value of the deviation of the y-gyro to assume that the robot stands still
