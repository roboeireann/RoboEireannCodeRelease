sendAtMinPlayerInterval = false; // if true, this is like the old behaviour of 1 message per robot per interval

maxPlayerSendInterval = 35000; // [ms] this should be shorter than the network timeout
minPlayerSendInterval = 1000; // [ms] this is the minimum send interval (assuming there is a reason to send)
// minTeamSendInterval = 1000; // [ms] this is the minimum send interval (assuming there is a reason to send)
maxPlayerSendIntervalJitter = 3000; // [ms] randomly jitter maxPlayerSendInterval by +/- this amount before sending
intervalJitter = 150; // [ms] randomly jitter intevals by +/- this amount so all robots do not send simultaneously
messageRateExtraSecs = 10; // [s] extra secs that artifically increase the message budget until near the end of the half, 
                            // e.g. to allow messages to be sent in ready
networkTimeout = 40000; // [ms]
minBallSeenPercentage = 10; // the min ball see percentage to be valid
ballDisappearedTimeout = 1000; // [ms] the maximum time since the ball should have been visible in the image to be valid, 
                               // should be less than ballLastSeenTimeout
ballLastSeenTimeout = 1500; // [ms] the maximum time since the ball was seen to be valid
ballMovementThreshold = 1000; // [mm] above this value the ball is considered to have moved enough to deserve an update
maxTeamBallSendInterval = 2500; // [ms] should be less than ballLastSeenTimeout in teamBallLocator.cfg
maxBallPlayerBallSendInterval = 1250; // [ms] should be less than maxTeamBallSendInterval and give enough time for team 
                                      // communication before maxTeamBallSendInterval times out. Smaller values are more responsive
minTimeBetween2RejectSounds = 5000;
sendMirroredRobotPose = false;
minDistanceLastTeamBall = 1000;
returnFromPenaltyDelay = 7000; // should be similar to walk in delay in BasicReturnFromPenalizedTask
maxTimeWithoutMessageBeforePlaying = 3000; // send a message on start of playing if no message in this time before the transition 

enableSoundForEachMessageSent = false; // for debugging message traffic when enabled

useWhistle = true;
useVisualReady = true;